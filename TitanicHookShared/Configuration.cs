using System;
using System.IO;
using System.Windows.Forms;

namespace TitanicHookShared;

/// <summary>
/// Callback delegate for config not found
/// </summary>
public delegate void ConfigurationNotFoundCallback(string filename, Exception e);

public class Configuration
{
    // Alloc console for logs
    public bool EnableConsole { get; set; } = false;
    
    // Log to a file
    public bool LogToFile { get; set; } = false;
    
    // Domain of the server (e.g. titanic.sh)
    public string ServerName { get; set; } = "titanic.sh";
    
    // Whether to hook WSAConnect (TCP Bancho)
    public bool HookTcpConnections { get; set; } = true;
    
    // Whether to hook NetLib (AddHeaderField, StringStream ctor)
    public bool HookNetLib { get; set; } = true;
    
    // Whether to hook Host header in pWebRequest (.NET Framework 4.x only)
    public bool HookModernHostMethod { get; set; }
#if NET40
         = true;
#else
        = false;
    #endif
    
    // Whether to hook pWebRequest certificate check (.NET Framework 4.x only)
    public bool HookCheckCertificate { get; set; }
#if NET40
         = true;
#else
        = false;
#endif

    public Configuration(string filename, ConfigurationNotFoundCallback? callback = null)
    {
        string[] lines;
        try
        {
            lines = File.ReadAllLines(filename);
        }
        catch (Exception e)
        {
            callback ??= DefaultConfigNotFoundCallback; // Assign default callback if not specified
            callback(filename, e);
            return;
        }

        foreach (string line in lines)
        {
            string cleanLine = line.Trim();
            if (cleanLine.StartsWith("#") || cleanLine == "")
            {
                continue;
            }
            
            string[] splitLine = cleanLine.Split(['='], 2);
            switch (splitLine[0])
            {
                case "EnableConsole":
                    EnableConsole = bool.Parse(splitLine[1]);
                    break;
                case "LogToFile":
                    LogToFile = bool.Parse(splitLine[1]);
                    break;
                case "ServerName":
                    ServerName = splitLine[1];
                    break;
                case "HookTcpConnections":
                    HookTcpConnections = bool.Parse(splitLine[1]);
                    break;
                case "HookNetLib":
                    HookNetLib = bool.Parse(splitLine[1]);
                    break;
                case "HookModernHostMethod":
                    HookModernHostMethod = bool.Parse(splitLine[1]);
                    break;
                case "HookCheckCertificate":
                    HookCheckCertificate = bool.Parse(splitLine[1]);
                    break;
            }
        }
    }

    /// <summary>
    /// Save current configuration to a file
    /// </summary>
    /// <param name="filename">Config filename</param>
    private void SaveConfiguration(string filename)
    {
        using FileStream fs = new FileStream(filename, FileMode.Create);
        using StreamWriter sw = new StreamWriter(fs);
        
        sw.WriteLine("# Configuration file for TitanicHookManaged");
        sw.WriteLine("# If you don't know what you're doing, DO NOT edit this file yourself");
        sw.WriteLine("");
        sw.WriteLine($"EnableConsole={EnableConsole}");
        sw.WriteLine($"LogToFile={LogToFile}");
        sw.WriteLine($"ServerName={ServerName}");
        sw.WriteLine($"HookTcpConnections={HookTcpConnections}");
        sw.WriteLine($"HookNetLib={HookNetLib}");
        sw.WriteLine($"HookModernHostMethod={HookModernHostMethod}");
        sw.WriteLine($"HookCheckCertificate={HookCheckCertificate}");
    }

    /// <summary>
    /// Default callback function for when config is not found
    /// </summary>
    /// <param name="filename">Config filename</param>
    /// <param name="e">Exception thrown when loading the config</param>
    private void DefaultConfigNotFoundCallback(string filename, Exception e)
    {
        MessageBox.Show("Couldn't load TitanicHook config. A default one will be created.", "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
        SaveConfiguration(filename);
    }
}
